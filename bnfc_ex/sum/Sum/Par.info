-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Sum/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Integer -> L_integ                                 (1)
	Exp -> Integer                                     (2)
	Exp -> Exp '+' Integer                             (3)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { PT _ (TS _ 1) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Integer         rule  1
	Exp             rules 2, 3

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp -> . Exp                                (rule 0)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 4

State 1

	Integer -> . L_integ                                (rule 1)

	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'+'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	Exp -> Integer .                                    (rule 2)

	'+'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Integer                            (rule 3)

	'+'            shift, and enter state 5
	%eof           accept


State 5

	Exp -> Exp '+' . Integer                            (rule 3)

	L_integ        shift, and enter state 2

	Integer        goto state 6

State 6

	Exp -> Exp '+' Integer .                            (rule 3)

	'+'            reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 4
Number of terminals: 2
Number of non-terminals: 3
Number of states: 7
