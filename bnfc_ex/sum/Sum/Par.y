-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Sum.Par
  ( happyError
  , myLexer
  , pExp
  ) where

import Prelude

import qualified Sum.Abs
import Sum.Lex

}

%name pExp Exp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '+'      { PT _ (TS _ 1) }
  L_integ  { PT _ (TI $$)  }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Exp :: { Sum.Abs.Exp }
Exp
  : Integer { Sum.Abs.EInt $1 }
  | Exp '+' Integer { Sum.Abs.EPlus $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

