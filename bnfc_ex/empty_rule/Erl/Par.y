-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Erl.Par
  ( happyError
  , myLexer
  , pStmt
  , pExpr
  ) where

import Prelude

import qualified Erl.Abs
import Erl.Lex

}

%name pStmt Stmt
%name pExpr Expr
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  'me'   { PT _ (TS _ 1) }
  'when' { PT _ (TS _ 2) }

%%


Stmt :: { Erl.Abs.Stmt }
Stmt : Expr 'when' { Erl.Abs.Stmt $1 }

Expr :: { Erl.Abs.Expr }
Expr
  : 'me' { Erl.Abs.SExprOne } | {- empty -} { Erl.Abs.SExprNone }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

