(:). [Exp] ::= Exp [Exp]; 
[]. [Exp] ::= ;

Eimpl.       Exp  ::= Exp1 "==>" Exp2;
Elor.        Exp2  ::= Exp2 "||" Exp3;
Eland.       Exp3  ::= Exp3 "&&" Exp4;
Ebitor.      Exp4  ::= Exp4 "|" Exp5;
Ebitexor.    Exp5  ::= Exp5 "^" Exp6;
Ebitand.     Exp6  ::= Exp6 "&" Exp7;
Eeq.         Exp7  ::= Exp7 "==" Exp8;
Eneq.        Exp7  ::= Exp7 "!=" Exp8;
Elthen.      Exp8  ::= Exp8 "<" Exp9;
Egrthen.     Exp8  ::= Exp8 ">" Exp9;
Ele.         Exp9 ::= Exp9 "<=" Exp10;
Ege.         Exp9 ::= Exp9 ">=" Exp10;
Eleft.       Exp10 ::= Exp10 "<<" Exp11;
Eright.      Exp10 ::= Exp10 ">>" Exp11;
Eplus.       Exp11 ::= Exp11 "+" Exp12;
Eminus.      Exp11 ::= Exp11 "-" Exp12;
Etimes.      Exp12 ::= Exp12 "*" Exp13;
Ediv.        Exp12 ::= Exp12 "/" Exp13;
Emod.        Exp12 ::= Exp12 "%" Exp13;
Epreinc.     Exp13 ::= "++" Exp14;
Epredec.     Exp13 ::= "--" Exp14;
Epreop.      Exp13 ::= Unary_operator Exp13;
Earray.      Exp14 ::= Exp14 "[" Exp "]" ;
Efunk.       Exp14 ::= Exp14 "(" ")";
Efunkpar.    Exp14 ::= Exp14 "(" [Exp] ")";
Eselect.     Exp14 ::= Exp14 "." CIdent;
Epoint.      Exp14 ::= Exp14 "->" CIdent;
Epostinc.    Exp14 ::= Exp14 "++";
Epostdec.    Exp14 ::= Exp14 "--";
Equant.      Exp15 ::= Quant [CIdent] "|" Exp;
Evar.        Exp15 ::= CIdent;
Econst.      Exp15 ::= Constant;
Estring.     Exp15 ::= String;

Qexists.     Quant ::= "exists";
Qall.        Quant ::= "forall";

(:[]). [CIdent] ::= CIdent;
(:). [CIdent] ::= CIdent "," [CIdent];
token Unsigned ["123456789"] digit * ('u'|'U');

token Long ["123456789"] digit * ('l'|'L');

token UnsignedLong ["123456789"] digit * (('u''l')|('U''L'));

token Hexadecimal '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

token HexUnsigned '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('u'|'U');

token HexLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('l'|'L');

token HexUnsLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ (('u''l')|('U''L'));

token Octal '0'["01234567"]*;

token OctalUnsigned '0'["01234567"]*('u'|'U');

token OctalLong '0'["01234567"]* ('l'|'L');

token OctalUnsLong '0'["01234567"]* (('u''l')|('U''L'));

token CDouble (((digit+ '.')|('.' digit+))(('e'|'E') ('-')? digit+)?)|
              (digit+ ('e'|'E') ('-')? digit+)|(digit+ '.' digit+ 'E' ('-')? digit+);

token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));

token CLongDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')?
                   digit+)?('l'|'L'))|((digit+ ('e'|'E')('-')? digit+)('l'|'L'));


(:[]).   [Exp] ::= Exp ;
(:).     [Exp] ::= Exp "," [Exp];

Efloat.        Constant ::= Double;
Echar.         Constant ::= Char;
Eunsigned.     Constant ::= Unsigned;
Elong.         Constant ::= Long;
Eunsignlong.   Constant ::= UnsignedLong;
Ehexadec.      Constant ::= Hexadecimal;
Ehexaunsign.   Constant ::= HexUnsigned;
Ehexalong.     Constant ::= HexLong;
Ehexaunslong.  Constant ::= HexUnsLong;
Eoctal.        Constant ::= Octal;
Eoctalunsign.  Constant ::= OctalUnsigned;
Eoctallong.    Constant ::= OctalLong;
Eoctalunslong. Constant ::= OctalUnsLong;
Ecdouble.      Constant ::= CDouble;
Ecfloat.       Constant ::= CFloat;
Eclongdouble.  Constant ::= CLongDouble;
Eint.          Constant ::= Integer;

_. Exp   ::= Exp1 ;
_. Exp1   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
_. Exp14 ::= Exp15 ;
_. Exp15 ::= "(" Exp ")" ;

Address.     Unary_operator ::= "&" ;
Indirection. Unary_operator ::= "*" ;
Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Complement.  Unary_operator ::= "~" ;
Logicalneg.  Unary_operator ::= "!" ;


token CIdent (letter | '_') (letter | digit | '_' | '\'')*;