-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Prop.

module Prop.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Prop.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Prop.Abs.Unsigned where
  prt _ (Prop.Abs.Unsigned i) = doc $ showString i
instance Print Prop.Abs.Long where
  prt _ (Prop.Abs.Long i) = doc $ showString i
instance Print Prop.Abs.UnsignedLong where
  prt _ (Prop.Abs.UnsignedLong i) = doc $ showString i
instance Print Prop.Abs.Hexadecimal where
  prt _ (Prop.Abs.Hexadecimal i) = doc $ showString i
instance Print Prop.Abs.HexUnsigned where
  prt _ (Prop.Abs.HexUnsigned i) = doc $ showString i
instance Print Prop.Abs.HexLong where
  prt _ (Prop.Abs.HexLong i) = doc $ showString i
instance Print Prop.Abs.HexUnsLong where
  prt _ (Prop.Abs.HexUnsLong i) = doc $ showString i
instance Print Prop.Abs.Octal where
  prt _ (Prop.Abs.Octal i) = doc $ showString i
instance Print Prop.Abs.OctalUnsigned where
  prt _ (Prop.Abs.OctalUnsigned i) = doc $ showString i
instance Print Prop.Abs.OctalLong where
  prt _ (Prop.Abs.OctalLong i) = doc $ showString i
instance Print Prop.Abs.OctalUnsLong where
  prt _ (Prop.Abs.OctalUnsLong i) = doc $ showString i
instance Print Prop.Abs.CDouble where
  prt _ (Prop.Abs.CDouble i) = doc $ showString i
instance Print Prop.Abs.CFloat where
  prt _ (Prop.Abs.CFloat i) = doc $ showString i
instance Print Prop.Abs.CLongDouble where
  prt _ (Prop.Abs.CLongDouble i) = doc $ showString i
instance Print Prop.Abs.CIdent where
  prt _ (Prop.Abs.CIdent i) = doc $ showString i
instance Print [Prop.Abs.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Prop.Abs.Exp where
  prt i = \case
    Prop.Abs.Equant quant cidents exp -> prPrec i 0 (concatD [prt 0 quant, prt 0 cidents, doc (showString "|"), prt 1 exp])
    Prop.Abs.Eimpl exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "==>"), prt 2 exp2])
    Prop.Abs.Elor exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "||"), prt 3 exp2])
    Prop.Abs.Eland exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "&&"), prt 4 exp2])
    Prop.Abs.Ebitor exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "|"), prt 5 exp2])
    Prop.Abs.Ebitexor exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "^"), prt 6 exp2])
    Prop.Abs.Ebitand exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "&"), prt 7 exp2])
    Prop.Abs.Eeq exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "=="), prt 8 exp2])
    Prop.Abs.Eneq exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "!="), prt 8 exp2])
    Prop.Abs.Elthen exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "<"), prt 9 exp2])
    Prop.Abs.Egrthen exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString ">"), prt 9 exp2])
    Prop.Abs.Ele exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    Prop.Abs.Ege exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    Prop.Abs.Eleft exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    Prop.Abs.Eright exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    Prop.Abs.Eplus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    Prop.Abs.Eminus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    Prop.Abs.Etimes exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    Prop.Abs.Ediv exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    Prop.Abs.Emod exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    Prop.Abs.Epreinc exp -> prPrec i 13 (concatD [doc (showString "++"), prt 14 exp])
    Prop.Abs.Epredec exp -> prPrec i 13 (concatD [doc (showString "--"), prt 14 exp])
    Prop.Abs.Epreop unaryoperator exp -> prPrec i 13 (concatD [prt 0 unaryoperator, prt 13 exp])
    Prop.Abs.Earray exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    Prop.Abs.Efunk exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "("), doc (showString ")")])
    Prop.Abs.Efunkpar exp exps -> prPrec i 14 (concatD [prt 14 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    Prop.Abs.Eselect exp cident -> prPrec i 14 (concatD [prt 14 exp, doc (showString "."), prt 0 cident])
    Prop.Abs.Epoint exp cident -> prPrec i 14 (concatD [prt 14 exp, doc (showString "->"), prt 0 cident])
    Prop.Abs.Epostinc exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "++")])
    Prop.Abs.Epostdec exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "--")])
    Prop.Abs.Evar cident -> prPrec i 15 (concatD [prt 0 cident])
    Prop.Abs.Econst constant -> prPrec i 15 (concatD [prt 0 constant])
    Prop.Abs.Estring str -> prPrec i 15 (concatD [printString str])

instance Print Prop.Abs.Quant where
  prt i = \case
    Prop.Abs.Qexists -> prPrec i 0 (concatD [doc (showString "exists")])
    Prop.Abs.Qall -> prPrec i 0 (concatD [doc (showString "forall")])

instance Print [Prop.Abs.CIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Prop.Abs.Constant where
  prt i = \case
    Prop.Abs.Efloat d -> prPrec i 0 (concatD [prt 0 d])
    Prop.Abs.Echar c -> prPrec i 0 (concatD [prt 0 c])
    Prop.Abs.Eunsigned unsigned -> prPrec i 0 (concatD [prt 0 unsigned])
    Prop.Abs.Elong long -> prPrec i 0 (concatD [prt 0 long])
    Prop.Abs.Eunsignlong unsignedlong -> prPrec i 0 (concatD [prt 0 unsignedlong])
    Prop.Abs.Ehexadec hexadecimal -> prPrec i 0 (concatD [prt 0 hexadecimal])
    Prop.Abs.Ehexaunsign hexunsigned -> prPrec i 0 (concatD [prt 0 hexunsigned])
    Prop.Abs.Ehexalong hexlong -> prPrec i 0 (concatD [prt 0 hexlong])
    Prop.Abs.Ehexaunslong hexunslong -> prPrec i 0 (concatD [prt 0 hexunslong])
    Prop.Abs.Eoctal octal -> prPrec i 0 (concatD [prt 0 octal])
    Prop.Abs.Eoctalunsign octalunsigned -> prPrec i 0 (concatD [prt 0 octalunsigned])
    Prop.Abs.Eoctallong octallong -> prPrec i 0 (concatD [prt 0 octallong])
    Prop.Abs.Eoctalunslong octalunslong -> prPrec i 0 (concatD [prt 0 octalunslong])
    Prop.Abs.Ecdouble cdouble -> prPrec i 0 (concatD [prt 0 cdouble])
    Prop.Abs.Ecfloat cfloat -> prPrec i 0 (concatD [prt 0 cfloat])
    Prop.Abs.Eclongdouble clongdouble -> prPrec i 0 (concatD [prt 0 clongdouble])
    Prop.Abs.Eint n -> prPrec i 0 (concatD [prt 0 n])

instance Print Prop.Abs.Unary_operator where
  prt i = \case
    Prop.Abs.Address -> prPrec i 0 (concatD [doc (showString "&")])
    Prop.Abs.Indirection -> prPrec i 0 (concatD [doc (showString "*")])
    Prop.Abs.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Prop.Abs.Negative -> prPrec i 0 (concatD [doc (showString "-")])
    Prop.Abs.Complement -> prPrec i 0 (concatD [doc (showString "~")])
    Prop.Abs.Logicalneg -> prPrec i 0 (concatD [doc (showString "!")])
