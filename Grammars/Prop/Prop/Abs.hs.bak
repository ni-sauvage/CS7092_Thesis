-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Prop.

module Prop.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Exp
    = Equant Quant [CIdent] Exp
    | Eimpl Exp Exp
    | Elor Exp Exp
    | Eland Exp Exp
    | Ebitor Exp Exp
    | Ebitexor Exp Exp
    | Ebitand Exp Exp
    | Eeq Exp Exp
    | Eneq Exp Exp
    | Elthen Exp Exp
    | Egrthen Exp Exp
    | Ele Exp Exp
    | Ege Exp Exp
    | Eleft Exp Exp
    | Eright Exp Exp
    | Eplus Exp Exp
    | Eminus Exp Exp
    | Etimes Exp Exp
    | Ediv Exp Exp
    | Emod Exp Exp
    | Epreinc Exp
    | Epredec Exp
    | Epreop Unary_operator Exp
    | Earray Exp Exp
    | Efunk Exp
    | Efunkpar Exp [Exp]
    | Eselect Exp CIdent
    | Epoint Exp CIdent
    | Epostinc Exp
    | Epostdec Exp
    | Evar CIdent
    | Econst Constant
    | Estring String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Quant = Qexists | Qall
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constant
    = Efloat Double
    | Echar Char
    | Eunsigned Unsigned
    | Elong Long
    | Eunsignlong UnsignedLong
    | Ehexadec Hexadecimal
    | Ehexaunsign HexUnsigned
    | Ehexalong HexLong
    | Ehexaunslong HexUnsLong
    | Eoctal Octal
    | Eoctalunsign OctalUnsigned
    | Eoctallong OctalLong
    | Eoctalunslong OctalUnsLong
    | Ecdouble CDouble
    | Ecfloat CFloat
    | Eclongdouble CLongDouble
    | Eint Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Unary_operator
    = Address | Indirection | Plus | Negative | Complement | Logicalneg
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Unsigned = Unsigned String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Long = Long String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype UnsignedLong = UnsignedLong String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Hexadecimal = Hexadecimal String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HexUnsigned = HexUnsigned String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HexLong = HexLong String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HexUnsLong = HexUnsLong String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Octal = Octal String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype OctalUnsigned = OctalUnsigned String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype OctalLong = OctalLong String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype OctalUnsLong = OctalUnsLong String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CDouble = CDouble String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CFloat = CFloat String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CLongDouble = CLongDouble String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CIdent = CIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

