-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Obs.Par
  ( happyError
  , myLexer
  , pListObsId
  , pObsId
  , pObs
  , pScalar
  , pEnd
  , pArgs
  , pTaskname
  , pVarname
  , pVarval
  , pTypename
  , pStateObs
  , pVarindex
  , pThreadId
  , pSizeDcl
  ) where

import Prelude

import qualified Obs.Abs
import Obs.Lex

}

%name pListObsId ListObsId
%name pObsId ObsId
%name pObs Obs
%name pScalar Scalar
%name pEnd End
%name pArgs Args
%name pTaskname Taskname
%name pVarname Varname
%name pVarval Varval
%name pTypename Typename
%name pStateObs StateObs
%name pVarindex Varindex
%name pThreadId ThreadId
%name pSizeDcl SizeDcl
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '@@@'      { PT _ (TS _ 1)        }
  'CALL'     { PT _ (TS _ 2)        }
  'DCLARRAY' { PT _ (TS _ 3)        }
  'DECL'     { PT _ (TS _ 4)        }
  'DEF'      { PT _ (TS _ 5)        }
  'END'      { PT _ (TS _ 6)        }
  'INIT'     { PT _ (TS _ 7)        }
  'NAME'     { PT _ (TS _ 8)        }
  'NULL'     { PT _ (TS _ 9)        }
  'PTR'      { PT _ (TS _ 10)       }
  'SCALAR'   { PT _ (TS _ 11)       }
  'SEQ'      { PT _ (TS _ 12)       }
  'SIGNAL'   { PT _ (TS _ 13)       }
  'STATE'    { PT _ (TS _ 14)       }
  'STRUCT'   { PT _ (TS _ 15)       }
  'TASK'     { PT _ (TS _ 16)       }
  '_'        { PT _ (TS _ 17)       }
  L_doubl    { PT _ (TD $$)         }
  L_integ    { PT _ (TI $$)         }
  L_ObsIdent { PT _ (T_ObsIdent $$) }
  L_ObsStr   { PT _ (T_ObsStr $$)   }

%%

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

ObsIdent :: { Obs.Abs.ObsIdent }
ObsIdent  : L_ObsIdent { Obs.Abs.ObsIdent $1 }

ObsStr :: { Obs.Abs.ObsStr }
ObsStr  : L_ObsStr { Obs.Abs.ObsStr $1 }

ListObsId :: { [Obs.Abs.ObsId] }
ListObsId
  : '@@@' ObsId ListObsId { (:) $2 $3 } | '@@@' ObsId { (:[]) $2 }

ObsId :: { Obs.Abs.ObsId }
ObsId : ThreadId Obs { Obs.Abs.ObsId $1 $2 }

Obs :: { Obs.Abs.Obs }
Obs
  : 'NAME' ObsIdent { Obs.Abs.ObsName $2 }
  | 'INIT' { Obs.Abs.ObsInit }
  | 'TASK' Taskname { Obs.Abs.ObsTask $2 }
  | 'SIGNAL' Integer { Obs.Abs.ObsSignal $2 }
  | 'DEF' Varname Varval { Obs.Abs.ObsDef $2 $3 }
  | 'DECL' Typename Varname { Obs.Abs.ObsDecl $2 $3 }
  | 'DECL' Typename Varname Varval { Obs.Abs.ObsDeclVal $2 $3 $4 }
  | 'DCLARRAY' Typename Varname SizeDcl { Obs.Abs.ObsDeclArr $2 $3 $4 }
  | 'CALL' ObsIdent Args { Obs.Abs.ObsCall $2 $3 }
  | 'STATE' Integer StateObs { Obs.Abs.ObsState $2 $3 }
  | 'STRUCT' Varname { Obs.Abs.ObsStruct $2 }
  | 'SEQ' Varname Scalar { Obs.Abs.ObsSeq $2 $3 }
  | 'PTR' Varname Varval { Obs.Abs.ObsPtr $2 $3 }
  | 'SCALAR' Varname Varval { Obs.Abs.ObsScalar $2 $3 }
  | 'SCALAR' Varname Varindex Varval { Obs.Abs.ObsScalarIndex $2 $3 $4 }
  | 'END' Varname { Obs.Abs.ObsEnd $2 }

Scalar :: { Obs.Abs.Scalar }
Scalar
  : End { Obs.Abs.ObsScalarNone $1 }
  | '@@@' ThreadId 'SCALAR' '_' Varval Scalar { Obs.Abs.ObsScalarCons $2 $5 $6 }

End :: { Obs.Abs.End }
End : '@@@' ThreadId 'END' Varname { Obs.Abs.ObsEndSeq $2 $4 }

Args :: { Obs.Abs.Args }
Args
  : ObsStr Args { Obs.Abs.ArgsConsString $1 $2 }
  | Integer Args { Obs.Abs.ArgsConsInteger $1 $2 }
  | Double Args { Obs.Abs.ArgsConsDouble $1 $2 }
  | {- empty -} { Obs.Abs.ArgsOne }

Taskname :: { Obs.Abs.Taskname }
Taskname : ObsIdent { Obs.Abs.TaskName $1 }

Varname :: { Obs.Abs.Varname }
Varname : ObsIdent { Obs.Abs.VarName $1 }

Varval :: { Obs.Abs.Varval }
Varval
  : Integer { Obs.Abs.VarValInt $1 }
  | Double { Obs.Abs.VarValDouble $1 }
  | 'NULL' { Obs.Abs.VarValNull }
  | ObsStr { Obs.Abs.VarValStr $1 }

Typename :: { Obs.Abs.Typename }
Typename : ObsIdent { Obs.Abs.TypeName $1 }

StateObs :: { Obs.Abs.StateObs }
StateObs : ObsIdent { Obs.Abs.StateObs $1 }

Varindex :: { Obs.Abs.Varindex }
Varindex : Integer { Obs.Abs.VarIndex $1 }

ThreadId :: { Obs.Abs.ThreadId }
ThreadId : Integer { Obs.Abs.ThreadId $1 }

SizeDcl :: { Obs.Abs.SizeDcl }
SizeDcl
  : Varval { Obs.Abs.SizeDclVar $1 }
  | ObsIdent { Obs.Abs.SizeDclDef $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

