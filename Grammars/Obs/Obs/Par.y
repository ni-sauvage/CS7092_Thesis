-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Obs.Par
  ( happyError
  , myLexer
  , pListObs
  , pName
  , pArgs
  , pLMsg
  , pTaskname
  , pVarname
  , pVarval
  , pTypename
  , pState
  , pVarindex
  , pObs
  , pScalar
  , pEnd
  ) where

import Prelude

import qualified Obs.Abs
import Obs.Lex

}

%name pListObs ListObs
%name pName Name
%name pArgs Args
%name pLMsg LMsg
%name pTaskname Taskname
%name pVarname Varname
%name pVarval Varval
%name pTypename Typename
%name pState State
%name pVarindex Varindex
%name pObs Obs
%name pScalar Scalar
%name pEnd End
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '@@@'       { PT _ (TS _ 1)         }
  'CALL'      { PT _ (TS _ 2)         }
  'DCLARRAY'  { PT _ (TS _ 3)         }
  'DECL'      { PT _ (TS _ 4)         }
  'DEF'       { PT _ (TS _ 5)         }
  'END'       { PT _ (TS _ 6)         }
  'INIT'      { PT _ (TS _ 7)         }
  'LOG'       { PT _ (TS _ 8)         }
  'NAME'      { PT _ (TS _ 9)         }
  'PTR'       { PT _ (TS _ 10)        }
  'SCALAR'    { PT _ (TS _ 11)        }
  'SEQ'       { PT _ (TS _ 12)        }
  'SIGNAL'    { PT _ (TS _ 13)        }
  'STATE'     { PT _ (TS _ 14)        }
  'STRUCT'    { PT _ (TS _ 15)        }
  'TASK'      { PT _ (TS _ 16)        }
  '_'         { PT _ (TS _ 17)        }
  L_integ     { PT _ (TI $$)          }
  L_ObsString { PT _ (T_ObsString $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

ObsString :: { Obs.Abs.ObsString }
ObsString  : L_ObsString { Obs.Abs.ObsString $1 }

ListObs :: { [Obs.Abs.Obs] }
ListObs : {- empty -} { [] } | Obs ListObs { (:) $1 $2 }

Name :: { Obs.Abs.Name }
Name : ObsString { Obs.Abs.Mname $1 }

Args :: { Obs.Abs.Args }
Args
  : ObsString { Obs.Abs.ArgsOne $1 }
  | ObsString Args { Obs.Abs.ArgsCons $1 $2 }

LMsg :: { Obs.Abs.LMsg }
LMsg
  : ObsString { Obs.Abs.LmsgOne $1 }
  | ObsString LMsg { Obs.Abs.LmsgCons $1 $2 }

Taskname :: { Obs.Abs.Taskname }
Taskname : ObsString { Obs.Abs.TaskName $1 }

Varname :: { Obs.Abs.Varname }
Varname : ObsString { Obs.Abs.VarName $1 }

Varval :: { Obs.Abs.Varval }
Varval : ObsString { Obs.Abs.VarVal $1 }

Typename :: { Obs.Abs.Typename }
Typename : ObsString { Obs.Abs.TypeName $1 }

State :: { Obs.Abs.State }
State : ObsString { Obs.Abs.State $1 }

Varindex :: { Obs.Abs.Varindex }
Varindex : Integer { Obs.Abs.VarIndex $1 }

Obs :: { Obs.Abs.Obs }
Obs
  : '@@@' Integer 'NAME' Name { Obs.Abs.ObsName $2 $4 }
  | '@@@' Integer 'LOG' LMsg { Obs.Abs.ObsLog $2 $4 }
  | '@@@' Integer 'INIT' { Obs.Abs.ObsInit $2 }
  | '@@@' Integer 'TASK' Taskname { Obs.Abs.ObsTask $2 $4 }
  | '@@@' Integer 'SIGNAL' Integer { Obs.Abs.ObsSignal $2 $4 }
  | '@@@' Integer 'DEF' Varname Varval { Obs.Abs.ObsDef $2 $4 $5 }
  | '@@@' Integer 'DECL' Typename Varname Varval { Obs.Abs.ObsDeclVal $2 $4 $5 $6 }
  | '@@@' Integer 'DECL' Typename Varname { Obs.Abs.ObsDecl $2 $4 $5 }
  | '@@@' Integer 'DCLARRAY' Typename Varname Varval { Obs.Abs.ObsDeclArr $2 $4 $5 $6 }
  | '@@@' Integer 'CALL' Args { Obs.Abs.ObsCall $2 $4 }
  | '@@@' Integer 'STATE' Integer State { Obs.Abs.ObsState $2 $4 $5 }
  | '@@@' Integer 'STRUCT' Varname { Obs.Abs.ObsStruct $2 $4 }
  | '@@@' Integer 'SEQ' Varname Scalar { Obs.Abs.ObsSeq $2 $4 $5 }
  | '@@@' Integer 'PTR' Varname Varval { Obs.Abs.ObsPtr $2 $4 $5 }
  | '@@@' Integer 'SCALAR' Varname Varval { Obs.Abs.ObsScalar $2 $4 $5 }
  | '@@@' Integer 'SCALAR' Varname Varindex Varval { Obs.Abs.ObsScalarIndex $2 $4 $5 $6 }
  | '@@@' Integer 'END' Varname { Obs.Abs.ObsEnd $2 $4 }

Scalar :: { Obs.Abs.Scalar }
Scalar
  : '@@@' Integer '_' Varval Scalar { Obs.Abs.ObsScalarCons $2 $4 $5 }
  | End { Obs.Abs.ObsScalarNone $1 }

End :: { Obs.Abs.End }
End : '@@@' Integer 'END' Varname { Obs.Abs.ObsEndSeq $2 $4 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

