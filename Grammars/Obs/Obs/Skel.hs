-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Obs.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Obs.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transObsIdent :: Obs.Abs.ObsIdent -> Result
transObsIdent x = case x of
  Obs.Abs.ObsIdent string -> failure x

transObsStr :: Obs.Abs.ObsStr -> Result
transObsStr x = case x of
  Obs.Abs.ObsStr string -> failure x

transObsId :: Obs.Abs.ObsId -> Result
transObsId x = case x of
  Obs.Abs.ObsId threadid obs -> failure x

transObs :: Obs.Abs.Obs -> Result
transObs x = case x of
  Obs.Abs.ObsName obsident -> failure x
  Obs.Abs.ObsInit -> failure x
  Obs.Abs.ObsTask taskname -> failure x
  Obs.Abs.ObsSignal integer -> failure x
  Obs.Abs.ObsDef varname varval -> failure x
  Obs.Abs.ObsDecl typename varname -> failure x
  Obs.Abs.ObsDeclVal typename varname varval -> failure x
  Obs.Abs.ObsDeclArr typename varname sizedcl -> failure x
  Obs.Abs.ObsCall obsident args -> failure x
  Obs.Abs.ObsState integer stateobs -> failure x
  Obs.Abs.ObsStruct varname -> failure x
  Obs.Abs.ObsSeq varname scalar -> failure x
  Obs.Abs.ObsPtr varname varval -> failure x
  Obs.Abs.ObsScalar varname varval -> failure x
  Obs.Abs.ObsScalarIndex varname varindex varval -> failure x
  Obs.Abs.ObsEnd varname -> failure x

transScalar :: Obs.Abs.Scalar -> Result
transScalar x = case x of
  Obs.Abs.ObsScalarNone end -> failure x
  Obs.Abs.ObsScalarCons threadid varval scalar -> failure x

transEnd :: Obs.Abs.End -> Result
transEnd x = case x of
  Obs.Abs.ObsEndSeq threadid varname -> failure x

transArgs :: Obs.Abs.Args -> Result
transArgs x = case x of
  Obs.Abs.ArgsConsString obsstr args -> failure x
  Obs.Abs.ArgsConsInteger integer args -> failure x
  Obs.Abs.ArgsConsDouble double args -> failure x
  Obs.Abs.ArgsOne -> failure x

transTaskname :: Obs.Abs.Taskname -> Result
transTaskname x = case x of
  Obs.Abs.TaskName obsident -> failure x

transVarname :: Obs.Abs.Varname -> Result
transVarname x = case x of
  Obs.Abs.VarName obsident -> failure x

transVarval :: Obs.Abs.Varval -> Result
transVarval x = case x of
  Obs.Abs.VarValInt integer -> failure x
  Obs.Abs.VarValDouble double -> failure x
  Obs.Abs.VarValNull -> failure x
  Obs.Abs.VarValStr obsstr -> failure x

transTypename :: Obs.Abs.Typename -> Result
transTypename x = case x of
  Obs.Abs.TypeName obsident -> failure x

transStateObs :: Obs.Abs.StateObs -> Result
transStateObs x = case x of
  Obs.Abs.StateObs obsident -> failure x

transVarindex :: Obs.Abs.Varindex -> Result
transVarindex x = case x of
  Obs.Abs.VarIndex integer -> failure x

transThreadId :: Obs.Abs.ThreadId -> Result
transThreadId x = case x of
  Obs.Abs.ThreadId integer -> failure x

transSizeDcl :: Obs.Abs.SizeDcl -> Result
transSizeDcl x = case x of
  Obs.Abs.SizeDclVar varval -> failure x
  Obs.Abs.SizeDclDef obsident -> failure x
