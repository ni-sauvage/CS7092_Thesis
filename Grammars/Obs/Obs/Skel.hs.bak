-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Obs.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Obs.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transObsString :: Obs.Abs.ObsString -> Result
transObsString x = case x of
  Obs.Abs.ObsString string -> failure x

transInt :: Obs.Abs.Int -> Result
transInt x = case x of
  Obs.Abs.Int string -> failure x

transTInt :: Obs.Abs.TInt -> Result
transTInt x = case x of
  Obs.Abs.TInt string -> failure x

transName :: Obs.Abs.Name -> Result
transName x = case x of
  Obs.Abs.Mname obsstring -> failure x

transArgs :: Obs.Abs.Args -> Result
transArgs x = case x of
  Obs.Abs.ArgsOne obsstring -> failure x
  Obs.Abs.ArgsCons obsstring args -> failure x

transLMsg :: Obs.Abs.LMsg -> Result
transLMsg x = case x of
  Obs.Abs.LmsgOne obsstring -> failure x
  Obs.Abs.LmsgCons obsstring lmsg -> failure x

transTaskname :: Obs.Abs.Taskname -> Result
transTaskname x = case x of
  Obs.Abs.TaskName obsstring -> failure x

transVarname :: Obs.Abs.Varname -> Result
transVarname x = case x of
  Obs.Abs.VarName obsstring -> failure x

transVarval :: Obs.Abs.Varval -> Result
transVarval x = case x of
  Obs.Abs.VarVal obsstring -> failure x

transTypename :: Obs.Abs.Typename -> Result
transTypename x = case x of
  Obs.Abs.TypeName obsstring -> failure x

transState :: Obs.Abs.State -> Result
transState x = case x of
  Obs.Abs.State obsstring -> failure x

transVarindex :: Obs.Abs.Varindex -> Result
transVarindex x = case x of
  Obs.Abs.VarIndex integer -> failure x

transObs :: Obs.Abs.Obs -> Result
transObs x = case x of
  Obs.Abs.ObsName name -> failure x
  Obs.Abs.ObsLog int lmsg -> failure x
  Obs.Abs.ObsInit int -> failure x
  Obs.Abs.ObsTask int taskname -> failure x
  Obs.Abs.ObsSignal int integer -> failure x
  Obs.Abs.ObsDef int varname varval -> failure x
  Obs.Abs.ObsDeclVal int typename varname varval -> failure x
  Obs.Abs.ObsDecl int typename varname -> failure x
  Obs.Abs.ObsDeclArr int typename varname varval -> failure x
  Obs.Abs.ObsCall int args -> failure x
  Obs.Abs.ObsState int integer state -> failure x
  Obs.Abs.ObsStruct int varname -> failure x
  Obs.Abs.ObsSeq int varname scalar -> failure x
  Obs.Abs.ObsPtr int varname varval -> failure x
  Obs.Abs.ObsScalar int varname varval -> failure x
  Obs.Abs.ObsScalarIndex int varname varindex varval -> failure x
  Obs.Abs.ObsEnd int varname -> failure x

transScalar :: Obs.Abs.Scalar -> Result
transScalar x = case x of
  Obs.Abs.ObsScalarCons integer varval scalar -> failure x
  Obs.Abs.ObsScalarNone end -> failure x

transEnd :: Obs.Abs.End -> Result
transEnd x = case x of
  Obs.Abs.ObsEndSeq integer varname -> failure x
