--entrypoints Init;

(:[]).    [Module] ::= Module;
(:).      [Module] ::= Module [Module];

rules Visible ::= "hidden" | "show";
rules ChanPoll ::= "full" | "empty" "nfull" "nempty";
rules Separator ::= ";" | "->";
rules Typename ::= "bit" | "bool" | "byte" | "short" | "int" | "mtype" | "chan" | Uname;
rules UnrOp ::= "~" | "-" | "!";
rules Const ::= "true" | "false" | "skip" | Integer;
rules PrintType ::= "print" | "printf" | "printm";

Mproc. Module ::= Proctype;
Minline. Module ::= Inline;
Minit. Module ::= Init;
Mnever. Module ::= Never;
Mtrace. Module ::= Trace;
Mutype. Module ::= Utype;
Mmtype. Module ::= Mtype;
MdeclList. Module ::= DeclList;

Ptype. Proctype ::= Pactive "proctype" Name "(" PdeclList ")" Ppriority Penabler "{" Sequence "}";
Iline. Inline ::= "inline" Name "(" ArgList ")" "{" Sequence "}";

PactiveNone. Pactive ::= ""; 
PactiveOne. Pactive ::= Active;

PdeclListNone. PdeclList ::= "";
PdeclListOne. PdeclList ::= DeclList;

PpriorityNone. Ppriority ::= "";
PpriorityOne. Ppriority ::= Priority;

PenablerNone. Penabler ::= "";
PenablerOne. Penabler ::= Enabler;

Initialise. Init ::= "init" Ipriority "{" Sequence "}" ;

IpriorityNone. Ipriority ::= "";
IpriorityOne. Ipriority ::= Priority;

Nvr. Never ::= "never" "{" Sequence "}";
Trc. Trace ::= "trace" "{" Sequence "}";

Utp. Utype ::= "typedef" Name "{" DeclList "}" ";";

MtpEq. Mtype ::= "mtype" Mequals "{" Mname "}" Msep;
MtpNoEq. Mtype ::= "mtype" Mname Msep;
MsepNone. Msep ::= "";
MsepOne. Msep ::= ";";
Meq. Mequals ::= "";
Meq. Mequals ::= "=";

MnameOne. Mname ::= Name;
Mnamecons. Mname ::= Name "," Mname;

DclListOne. DeclList ::= Decl Separator;
DclListOneNoSep. DeclList ::= Decl;
DclListCons. DeclList ::= Decl Separator DeclList;

DclOne. Decl ::= DeclVisible Typename DclIvar;
DclOneUnsigned. Decl ::= DeclVisible UnsignedDecl;

DclIvarCons. DclIvar ::= Ivar "," DclIvar;
DclIvarSub. DclIvar ::= Ivar;

DclVisNone. DeclVisible ::= "";
DclVisOne. DeclVisible ::= Visible;

UDcl. UnsignedDecl ::= "unsigned" Name ":" Const UDclAssign;
UDclAssignNone. UDclAssign ::= "";
UdclAssignOne. UDclAssign ::= "=" AnyExpr;

Active. Active ::= "active" AConst;

AconstNone. AConst ::= "";
AconstOne. AConst ::= "[" Const "]";

Priority. Priority ::= "priority" Const;
Enabler. Enabler ::= "provided" "(" Expr ")";

SeqOne. Sequence ::= Step;
SeqOneSep. Sequence ::= Step Separator;
SeqNoStep. Sequence ::= Step Sequence;
SeqCons. Sequence ::= Step Separator Sequence;

UStmtNone. UStmt ::= "";
UStmtOne. UStmt ::= "unless" Stmt;

StepMType. Step ::= Mtype;
StepStmt. Step ::= Stmt UStmt;
StepDclList. Step ::= DeclList;
StepXR. Step ::= "xr" VarRefList;
StepXS. Step ::= "xs" VarRefList;

VarRefListOne. VarRefList ::= VarRef;
VarRefListCons. VarRefList ::= VarRef "," VarRefList;

AnyExprCond.      AnyExpr ::= "(" AnyExpr2 "->" AnyExpr2 ":" AnyExpr2 ")";
AnyExprlor.       AnyExpr2 ::= AnyExpr2 "||" AnyExpr3;
AnyExprland.      AnyExpr2 ::= AnyExpr2 "&&" AnyExpr3;
AnyExprbitor.     AnyExpr3 ::= AnyExpr3 "|" AnyExpr4;
AnyExprbitexor.   AnyExpr3 ::= AnyExpr3 "^" AnyExpr4;
AnyExprbitand.    AnyExpr3 ::= AnyExpr3 "&" AnyExpr4;
AnyExpreq.        AnyExpr4 ::= AnyExpr4 "==" AnyExpr5;
AnyExprneq.       AnyExpr4 ::= AnyExpr4 "!=" AnyExpr5;
AnyExprlthen.     AnyExpr5 ::= AnyExpr5 "<" AnyExpr6;
AnyExprgrthen.    AnyExpr5 ::= AnyExpr5 ">" AnyExpr6;
AnyExprle.        AnyExpr5 ::= AnyExpr5 "<=" AnyExpr6;
AnyExprge.        AnyExpr5 ::= AnyExpr5 ">=" AnyExpr6;
AnyExprleft.      AnyExpr6 ::= AnyExpr6 "<<" AnyExpr7;
AnyExprright.     AnyExpr6 ::= AnyExpr6 ">>" AnyExpr7;
AnyExprplus.      AnyExpr7 ::= AnyExpr7 "+" AnyExpr8;
AnyExprminus.     AnyExpr7 ::= AnyExpr7 "-" AnyExpr8;
AnyExprtimes.     AnyExpr8 ::= AnyExpr8 "*" AnyExpr9;
AnyExprdiv.       AnyExpr8 ::= AnyExpr8 "/" AnyExpr9;
AnyExprmod.       AnyExpr8 ::= AnyExpr8 "%" AnyExpr9;
AnyExprUnrOp. AnyExpr8 ::= UnrOp AnyExpr9;
AnyExprLen. AnyExpr9 ::= "len" "(" VarRef ")";
AnyExprPoll. AnyExpr9 ::= Poll;
AnyExprVarRef. AnyExpr9 ::= VarRef;
AnyExprConst. AnyExpr9 ::= Const;
AnyExprTimeout. AnyExpr9 ::= "timeout";
AnyExprNp. AnyExpr9 ::= "np_";
AnyExprEnabled. AnyExpr9 ::= "enabled" "(" AnyExpr ")";
AnyExprPCValue. AnyExpr9 ::= "pc_value" "(" AnyExpr ")";
AnyExprName. AnyExpr9 ::= Name "[" AnyExpr "]" "@" Name;
AnyExprRun. AnyExpr9 ::= "run" Name "(" RunArgs ")" RunPrio;
AnyExprGetPrio. AnyExpr9 ::= "get_priority" "(" Expr ")";
AnyExprSetPrio. AnyExpr9 ::= "set_priority" "(" Expr "," Expr ")";

_. AnyExpr   ::= AnyExpr1 ;
_. AnyExpr1  ::= AnyExpr2 ;
_. AnyExpr2  ::= AnyExpr3 ;
_. AnyExpr3  ::= AnyExpr4 ;
_. AnyExpr4  ::= AnyExpr5 ;
_. AnyExpr5  ::= AnyExpr6 ;
_. AnyExpr6  ::= AnyExpr7 ;
_. AnyExpr7  ::= AnyExpr8 ;
_. AnyExpr8  ::= AnyExpr9 ;
_. AnyExpr9  ::= "(" AnyExpr ")";

Ivar. Ivar ::= Name IvarConst IvarAssign;
IvarConstNone. IvarConst ::= ""; 
IvarConstOne. IvarConst ::= "[" Const "]";
IvarAssignNone. IvarAssign ::= "";
IvarAssignAnyExpr. IvarAssign ::= "=" AnyExpr;
IvarAssignChInit. IvarAssign ::= "=" ChInit;

ChInit. ChInit ::= "[" Const "]" "of" "{" ChType "}";

ChTypeOne. ChType ::= Typename;
ChTypeCons. ChType ::= Typename "," ChType;

VarRef. VarRef ::= Name VarRefAnyExpr VarRefTypedef;
VarRefAnyExprNone. VarRefAnyExpr ::= "";
VarRefAnyExprOne. VarRefAnyExpr ::= "[" AnyExpr "]";
VarRefTypedefNone. VarRefTypedef ::= "";
VarRefTypedefOne. VarRefTypedef ::= "." VarRef;

SendNormal. Send ::= VarRef "!" SendArgs;
SendSorted. Send ::= VarRef "!" "!" SendArgs;

ReceiveNormal. Receive ::= VarRef "?" RecvArgs;
ReceiveRandom. Receive ::= VarRef "?" "?" RecvArgs;
ReceivePoll. Receive ::= VarRef "?" "<" RecvArgs ">";
ReceivePollSecond. Receive ::= VarRef "?" "?" "<" RecvArgs ">";

PollNoSideEffect. Poll ::= VarRef "?" "[" RecvArgs "]";
PollNoSideEffectSecond. Poll ::= VarRef "?" "?" "[" RecvArgs "]";

SendArgs. SendArgs ::= ArgList;
SendArgsExpr. SendArgs ::= AnyExpr "(" ArgList ")";

ArgListCons. ArgList ::= AnyExpr "," ArgList;
ArgListOne. ArgList ::= AnyExpr;
ArgListNone. ArgList ::= "";

RecvArgsList. RecvArgs ::= RecvArgList;
RecvArgsParen. RecvArgs ::= RecvArgList "(" RecvArgs ")";

RecvArgListOne. RecvArgList ::= RecvArg;
RecvArgListCons. RecvArgList ::= RecvArg RecvArgList;

UnaryMinusNone. UnaryMinus ::= "";
UnaryMinusOne. UnaryMinus ::= "-";

RecvArgRef. RecvArg ::= VarRef;
RecvArgEval. RecvArg ::= "eval" "(" VarRef ")";
RecvArgConst. RecvArg ::= UnaryMinus Const;

AssignStd. Assign ::= VarRef "=" AnyExpr;
AssignInc. Assign ::= VarRef "++";
AssignDec. Assign ::= VarRef "--";

PArgsString. Pargs ::= String;
PArgsNoString. Pargs ::= ArgList;
PArgsBoth. Pargs ::= String "," ArgList;

PArgListNone. PArgList ::= "";
PargListOne. PargList ::= "," ArgList;

StmtIf. Stmt ::= "if" Options "fi";
StmtDo. Stmt ::= "do" Options "od";
StmtFor. Stmt ::= "for" "(" Range ")" "{" Sequence "}";
StmtAtomic. Stmt ::= "atomic" "{" Sequence "}";
StmtDAtomic. Stmt ::= "d_step" "{" Sequence "}";
StmtSelect. Stmt ::= "select" "(" Sequence ")";
StmtNorm. Stmt ::= "{" Sequence "}";
StmtSend. Stmt ::= Send;
StmtRec. Stmt ::= Receive;
StmtAssign. Stmt ::= Assign;
StmtElse. Stmt ::= "else";
StmtBreak. Stmt ::= "break";
StmtGoto. Stmt ::= "goto" Name;
StmtLabel. Stmt ::= Name ":" Stmt;
StmtPrint. Stmt ::= PrintType "(" Pargs ")";
StmtAssert. Stmt ::= "assert" Expr;
StmtCall. Stmt ::= Name "(" ArgList ")";
StmtExpr. Stmt ::= Expr;

RangeIn. Range ::= Name "in" Name;
RangeNoIn. Range ::= Name ":" AnyExpr ".." AnyExpr;

OptionsOne. Options ::= "::" Sequence;
OptionsCons. Options ::= "::" Sequence Options;

RunPrioNone. RunPrio ::= "";
RunPrioOne. RunPrio ::= Priority;

RunArgsNone. RunArgs ::= "";
RunArgsOne. RunArgs ::= ArgList;

ExprAny. Expr ::= AnyExpr;
ExprParen. Expr ::= "(" Expr ")";
ExprChanPoll. Expr ::= ChanPoll "(" VarRef ")";

Uname. Uname ::= Name;
Name. Name ::= PIdent;

token PIdent (letter | '_') (letter | '_' | digit)*;