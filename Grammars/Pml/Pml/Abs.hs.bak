-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Pml.

module Pml.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Visible = Visible_hidden | Visible_show
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ChanPoll = ChanPoll_full | ChanPoll1
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Separator = Separator1 | Separator2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Typename
    = Typename_bit
    | Typename_bool
    | Typename_byte
    | Typename_short
    | Typename_int
    | Typename_mtype
    | Typename_chan
    | TypenameUname Uname
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndOr = AndOr1 | AndOr2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BinOp
    = BinOp1
    | BinOp2
    | BinOp3
    | BinOp4
    | BinOp5
    | BinOp6
    | BinOp7
    | BinOp8
    | BinOp9
    | BinOp10
    | BinOp11
    | BinOp12
    | BinOp13
    | BinOp14
    | BinOp15
    | BinOp16
    | BinOpAndOr AndOr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnrOp = UnrOp1 | UnrOp2 | UnrOp3
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Const
    = Const_true | Const_false | Const_skip | ConstInteger Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PrintType
    = PrintType_print | PrintType_printf | PrintType_printm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Module
    = Mproc Proctype
    | Minline Inline
    | Minit Init
    | Mnever Never
    | Mtrace Trace
    | Mutype Utype
    | Mmtype Mtype
    | MdeclList DeclList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Proctype
    = Ptype Pactive Name PdeclList Ppriority Penabler Sequence
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Inline = Iline Name ArgList Sequence
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pactive = PactiveNone | PactiveOne Active
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PdeclList = PdeclListNone | PdeclListOne DeclList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Ppriority = PpriorityNone | PpriorityOne Priority
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Penabler = PenablerNone | PenablerOne Enabler
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Init = Initialise Ipriority Sequence
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Ipriority = IpriorityNone | IpriorityOne Priority
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Never = Nvr Sequence
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Trace = Trc Sequence
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Utype = Utp Name DeclList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Mtype = Mtp Mequals Mname Msep
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Msep = MsepNone | MsepOne
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Mequals = Meq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Mname = MnameOne Name | Mnamecons Name Mname
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeclList
    = DclListOne Decl Separator
    | DclListOneNoSep Decl
    | DclListCons Decl Separator DeclList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl
    = DclOne DeclVisible Typename DclIvar
    | DclOneUnsigned DeclVisible UnsignedDecl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DclIvar = DclIvarCons Ivar DclIvar | DclIvarSub Ivar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeclVisible = DclVisNone | DclVisOne Visible
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnsignedDecl = UDcl Name Const UDclAssign
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UDclAssign = UDclAssignNone | UdclAssignOne AnyExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Active = Active AConst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AConst = AconstNone | AconstOne Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Priority = Priority Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Enabler = Enabler Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Sequence
    = SeqOne Step
    | SeqOneSep Step Separator
    | SeqNoStep Step Sequence
    | SeqCons Step Separator Sequence
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UStmt = UStmtNone | UStmtOne Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Step
    = StepStmt Stmt UStmt
    | StepDclList DeclList
    | StepMType Mtype
    | StepXR VarRefList
    | StepXS VarRefList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarRefList
    = VarRefListOne VarRef | VarRefListCons VarRef VarRefList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AnyExpr
    = AnyExprParen AnyExpr
    | AnyExprBinOp AnyExpr BinOp AnyExpr
    | AnyExprUnrOp UnrOp AnyExpr
    | AnyExprCond AnyExpr AnyExpr AnyExpr
    | AnyExprLen VarRef
    | AnyExprPoll Poll
    | AnyExprVarRef VarRef
    | AnyExprConst Const
    | AnyExprTimeout
    | AnyExprNp
    | AnyExprEnabled AnyExpr
    | AnyExprPCValue AnyExpr
    | AnyExprName Name AnyExpr Name
    | AnyExprRun Name RunArgs RunPrio
    | AnyExprGetPrio Expr
    | AnyExprSetPrio Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Ivar = Ivar Name IvarConst IvarAssign
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IvarConst = IvarConstNone | IvarConstOne Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IvarAssign
    = IvarAssignNone
    | IvarAssignAnyExpr AnyExpr
    | IvarAssignChInit ChInit
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ChInit = ChInit Const ChType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ChType = ChTypeOne Typename | ChTypeCons Typename ChType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarRef = VarRef Name VarRefAnyExpr VarRefTypedef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarRefAnyExpr = VarRefAnyExprNone | VarRefAnyExprOne AnyExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarRefTypedef = VarRefTypedefNone | VarRefTypedefOne VarRef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Send = SendNormal VarRef SendArgs | SendSorted VarRef SendArgs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Receive
    = ReceiveNormal VarRef RecvArgs
    | ReceiveRandom VarRef RecvArgs
    | ReceivePoll VarRef RecvArgs
    | ReceivePollSecond VarRef RecvArgs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Poll
    = PollNoSideEffect VarRef RecvArgs
    | PollNoSideEffectSecond VarRef RecvArgs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SendArgs = SendArgs ArgList | SendArgsExpr AnyExpr ArgList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArgList
    = ArgListCons AnyExpr ArgList | ArgListOne AnyExpr | ArgListNone
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecvArgs
    = RecvArgsList RecvArgList | RecvArgsParen RecvArgList RecvArgs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecvArgList
    = RecvArgListOne RecvArg | RecvArgListCons RecvArg RecvArgList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnaryMinus = UnaryMinusNone | UnaryMinusOne
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecvArg
    = RecvArgRef VarRef
    | RecvArgEval VarRef
    | RecvArgConst UnaryMinus Const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Assign
    = AssignStd VarRef AnyExpr | AssignInc VarRef | AssignDec VarRef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pargs
    = PArgsString String
    | PArgsNoString ArgList
    | PArgsBoth String ArgList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PArgList = PArgListNone
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PargList = PargListOne ArgList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = StmtIf Options
    | StmtDo Options
    | StmtFor Range Sequence
    | StmtAtomic Sequence
    | StmtDAtomic Sequence
    | StmtSelect Sequence
    | StmtNorm Sequence
    | StmtSend Send
    | StmtRec Receive
    | StmtAssign Assign
    | StmtElse
    | StmtBreak
    | StmtGoto Name
    | StmtLabel Name Stmt
    | StmtPrint PrintType Pargs
    | StmtAssert Expr
    | StmtCall Name ArgList
    | StmtExpr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Range = RangeIn Name Name | RangeNoIn Name AnyExpr AnyExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Options = OptionsOne Sequence | OptionsCons Sequence Options
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RunPrio = RunPrioNone | RunPrioOne Priority
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RunArgs = RunArgsNone | RunArgsOne ArgList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = ExprAny AnyExpr
    | ExprParen Expr
    | ExprAndOr Expr AndOr Expr
    | ExprChanPoll ChanPoll VarRef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Uname = Uname Name
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Name = Name PIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PIdent = PIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

