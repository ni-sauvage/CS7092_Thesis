-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for C.

module C.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified C.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print C.Abs.Unsigned where
  prt _ (C.Abs.Unsigned i) = doc $ showString i
instance Print C.Abs.Long where
  prt _ (C.Abs.Long i) = doc $ showString i
instance Print C.Abs.UnsignedLong where
  prt _ (C.Abs.UnsignedLong i) = doc $ showString i
instance Print C.Abs.Hexadecimal where
  prt _ (C.Abs.Hexadecimal i) = doc $ showString i
instance Print C.Abs.HexUnsigned where
  prt _ (C.Abs.HexUnsigned i) = doc $ showString i
instance Print C.Abs.HexLong where
  prt _ (C.Abs.HexLong i) = doc $ showString i
instance Print C.Abs.HexUnsLong where
  prt _ (C.Abs.HexUnsLong i) = doc $ showString i
instance Print C.Abs.Octal where
  prt _ (C.Abs.Octal i) = doc $ showString i
instance Print C.Abs.OctalUnsigned where
  prt _ (C.Abs.OctalUnsigned i) = doc $ showString i
instance Print C.Abs.OctalLong where
  prt _ (C.Abs.OctalLong i) = doc $ showString i
instance Print C.Abs.OctalUnsLong where
  prt _ (C.Abs.OctalUnsLong i) = doc $ showString i
instance Print C.Abs.CDouble where
  prt _ (C.Abs.CDouble i) = doc $ showString i
instance Print C.Abs.CFloat where
  prt _ (C.Abs.CFloat i) = doc $ showString i
instance Print C.Abs.CLongDouble where
  prt _ (C.Abs.CLongDouble i) = doc $ showString i
instance Print C.Abs.CIdent where
  prt _ (C.Abs.CIdent i) = doc $ showString i
instance Print C.Abs.Program where
  prt i = \case
    C.Abs.Progr externaldeclarations -> prPrec i 0 (concatD [prt 0 externaldeclarations])

instance Print [C.Abs.External_declaration] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print C.Abs.External_declaration where
  prt i = \case
    C.Abs.Afunc functiondef -> prPrec i 0 (concatD [prt 0 functiondef])
    C.Abs.Global dec -> prPrec i 0 (concatD [prt 0 dec])

instance Print C.Abs.Function_def where
  prt i = \case
    C.Abs.OldFunc declarationspecifiers declarator decs compoundstm -> prPrec i 0 (concatD [prt 0 declarationspecifiers, prt 0 declarator, prt 0 decs, prt 0 compoundstm])
    C.Abs.NewFunc declarationspecifiers declarator compoundstm -> prPrec i 0 (concatD [prt 0 declarationspecifiers, prt 0 declarator, prt 0 compoundstm])
    C.Abs.OldFuncInt declarator decs compoundstm -> prPrec i 0 (concatD [prt 0 declarator, prt 0 decs, prt 0 compoundstm])
    C.Abs.NewFuncInt declarator compoundstm -> prPrec i 0 (concatD [prt 0 declarator, prt 0 compoundstm])

instance Print C.Abs.Dec where
  prt i = \case
    C.Abs.NoDeclarator declarationspecifiers -> prPrec i 0 (concatD [prt 0 declarationspecifiers, doc (showString ";")])
    C.Abs.Declarators declarationspecifiers initdeclarators -> prPrec i 0 (concatD [prt 0 declarationspecifiers, prt 0 initdeclarators, doc (showString ";")])

instance Print [C.Abs.Dec] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [C.Abs.Declaration_specifier] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print C.Abs.Declaration_specifier where
  prt i = \case
    C.Abs.Type typespecifier -> prPrec i 0 (concatD [prt 0 typespecifier])
    C.Abs.Storage storageclassspecifier -> prPrec i 0 (concatD [prt 0 storageclassspecifier])
    C.Abs.SpecProp typequalifier -> prPrec i 0 (concatD [prt 0 typequalifier])

instance Print [C.Abs.Init_declarator] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print C.Abs.Init_declarator where
  prt i = \case
    C.Abs.OnlyDecl declarator -> prPrec i 0 (concatD [prt 0 declarator])
    C.Abs.InitDecl declarator initializer -> prPrec i 0 (concatD [prt 0 declarator, doc (showString "="), prt 0 initializer])

instance Print C.Abs.Type_specifier where
  prt i = \case
    C.Abs.Tvoid -> prPrec i 0 (concatD [doc (showString "void")])
    C.Abs.Tchar -> prPrec i 0 (concatD [doc (showString "char")])
    C.Abs.Tshort -> prPrec i 0 (concatD [doc (showString "short")])
    C.Abs.Tint -> prPrec i 0 (concatD [doc (showString "int")])
    C.Abs.Tlong -> prPrec i 0 (concatD [doc (showString "long")])
    C.Abs.Tfloat -> prPrec i 0 (concatD [doc (showString "float")])
    C.Abs.Tdouble -> prPrec i 0 (concatD [doc (showString "double")])
    C.Abs.Tsigned -> prPrec i 0 (concatD [doc (showString "signed")])
    C.Abs.Tunsigned -> prPrec i 0 (concatD [doc (showString "unsigned")])
    C.Abs.Tstruct structorunionspec -> prPrec i 0 (concatD [prt 0 structorunionspec])
    C.Abs.Tenum enumspecifier -> prPrec i 0 (concatD [prt 0 enumspecifier])
    C.Abs.Tname -> prPrec i 0 (concatD [doc (showString "Typedef_name")])
    C.Abs.Trtsc -> prPrec i 0 (concatD [doc (showString "rtems_status_code")])
    C.Abs.Trtes -> prPrec i 0 (concatD [doc (showString "rtems_event_set")])
    C.Abs.Trtid -> prPrec i 0 (concatD [doc (showString "rtems_id")])
    C.Abs.Trtctx -> prPrec i 0 (concatD [doc (showString "Context")])
    C.Abs.Trttp -> prPrec i 0 (concatD [doc (showString "rtems_task_priority")])
    C.Abs.Tszet -> prPrec i 0 (concatD [doc (showString "size_t")])
    C.Abs.Tevctx -> prPrec i 0 (concatD [doc (showString "RtemsModelEventsMgr_Context")])
    C.Abs.Tpsctx -> prPrec i 0 (concatD [doc (showString "RtemsModelProtoSem_Context")])
    C.Abs.Trtta -> prPrec i 0 (concatD [doc (showString "rtems_task_argument")])

instance Print C.Abs.Storage_class_specifier where
  prt i = \case
    C.Abs.MyType -> prPrec i 0 (concatD [doc (showString "typedef")])
    C.Abs.GlobalPrograms -> prPrec i 0 (concatD [doc (showString "extern")])
    C.Abs.LocalProgram -> prPrec i 0 (concatD [doc (showString "static")])
    C.Abs.LocalBlock -> prPrec i 0 (concatD [doc (showString "auto")])
    C.Abs.LocalReg -> prPrec i 0 (concatD [doc (showString "register")])

instance Print C.Abs.Type_qualifier where
  prt i = \case
    C.Abs.Const -> prPrec i 0 (concatD [doc (showString "const")])
    C.Abs.NoOptim -> prPrec i 0 (concatD [doc (showString "volatile")])

instance Print C.Abs.Struct_or_union_spec where
  prt i = \case
    C.Abs.Tag structorunion cident structdecs -> prPrec i 0 (concatD [prt 0 structorunion, prt 0 cident, doc (showString "{"), prt 0 structdecs, doc (showString "}")])
    C.Abs.Unique structorunion structdecs -> prPrec i 0 (concatD [prt 0 structorunion, doc (showString "{"), prt 0 structdecs, doc (showString "}")])
    C.Abs.TagType structorunion cident -> prPrec i 0 (concatD [prt 0 structorunion, prt 0 cident])

instance Print C.Abs.Struct_or_union where
  prt i = \case
    C.Abs.Struct -> prPrec i 0 (concatD [doc (showString "struct")])
    C.Abs.Union -> prPrec i 0 (concatD [doc (showString "union")])

instance Print [C.Abs.Struct_dec] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print C.Abs.Struct_dec where
  prt i = \case
    C.Abs.Structen specquals structdeclarators -> prPrec i 0 (concatD [prt 0 specquals, prt 0 structdeclarators, doc (showString ";")])

instance Print [C.Abs.Spec_qual] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print C.Abs.Spec_qual where
  prt i = \case
    C.Abs.TypeSpec typespecifier -> prPrec i 0 (concatD [prt 0 typespecifier])
    C.Abs.QualSpec typequalifier -> prPrec i 0 (concatD [prt 0 typequalifier])

instance Print [C.Abs.Struct_declarator] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print C.Abs.Struct_declarator where
  prt i = \case
    C.Abs.Decl declarator -> prPrec i 0 (concatD [prt 0 declarator])
    C.Abs.Field constantexpression -> prPrec i 0 (concatD [doc (showString ":"), prt 0 constantexpression])
    C.Abs.DecField declarator constantexpression -> prPrec i 0 (concatD [prt 0 declarator, doc (showString ":"), prt 0 constantexpression])

instance Print C.Abs.Enum_specifier where
  prt i = \case
    C.Abs.EnumDec enumerators -> prPrec i 0 (concatD [doc (showString "enum"), doc (showString "{"), prt 0 enumerators, doc (showString "}")])
    C.Abs.EnumName cident enumerators -> prPrec i 0 (concatD [doc (showString "enum"), prt 0 cident, doc (showString "{"), prt 0 enumerators, doc (showString "}")])
    C.Abs.EnumVar cident -> prPrec i 0 (concatD [doc (showString "enum"), prt 0 cident])

instance Print [C.Abs.Enumerator] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print C.Abs.Enumerator where
  prt i = \case
    C.Abs.Plain cident -> prPrec i 0 (concatD [prt 0 cident])
    C.Abs.EnumInit cident constantexpression -> prPrec i 0 (concatD [prt 0 cident, doc (showString "="), prt 0 constantexpression])

instance Print C.Abs.Declarator where
  prt i = \case
    C.Abs.BeginPointer pointer directdeclarator -> prPrec i 0 (concatD [prt 0 pointer, prt 0 directdeclarator])
    C.Abs.NoPointer directdeclarator -> prPrec i 0 (concatD [prt 0 directdeclarator])

instance Print C.Abs.Direct_declarator where
  prt i = \case
    C.Abs.Name cident -> prPrec i 0 (concatD [prt 0 cident])
    C.Abs.ParenDecl declarator -> prPrec i 0 (concatD [doc (showString "("), prt 0 declarator, doc (showString ")")])
    C.Abs.InnitArray directdeclarator constantexpression -> prPrec i 0 (concatD [prt 0 directdeclarator, doc (showString "["), prt 0 constantexpression, doc (showString "]")])
    C.Abs.Incomplete directdeclarator -> prPrec i 0 (concatD [prt 0 directdeclarator, doc (showString "["), doc (showString "]")])
    C.Abs.NewFuncDec directdeclarator parametertype -> prPrec i 0 (concatD [prt 0 directdeclarator, doc (showString "("), prt 0 parametertype, doc (showString ")")])
    C.Abs.OldFuncDef directdeclarator cidents -> prPrec i 0 (concatD [prt 0 directdeclarator, doc (showString "("), prt 0 cidents, doc (showString ")")])
    C.Abs.OldFuncDec directdeclarator -> prPrec i 0 (concatD [prt 0 directdeclarator, doc (showString "("), doc (showString ")")])

instance Print C.Abs.Pointer where
  prt i = \case
    C.Abs.Point -> prPrec i 0 (concatD [doc (showString "*")])
    C.Abs.PointQual typequalifiers -> prPrec i 0 (concatD [doc (showString "*"), prt 0 typequalifiers])
    C.Abs.PointPoint pointer -> prPrec i 0 (concatD [doc (showString "*"), prt 0 pointer])
    C.Abs.PointQualPoint typequalifiers pointer -> prPrec i 0 (concatD [doc (showString "*"), prt 0 typequalifiers, prt 0 pointer])

instance Print [C.Abs.Type_qualifier] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print C.Abs.Parameter_type where
  prt i = \case
    C.Abs.AllSpec parameterdeclarations -> prPrec i 0 (concatD [prt 0 parameterdeclarations])
    C.Abs.More parameterdeclarations -> prPrec i 0 (concatD [prt 0 parameterdeclarations, doc (showString ","), doc (showString "...")])

instance Print C.Abs.Parameter_declarations where
  prt i = \case
    C.Abs.ParamDec parameterdeclaration -> prPrec i 0 (concatD [prt 0 parameterdeclaration])
    C.Abs.MoreParamDec parameterdeclarations parameterdeclaration -> prPrec i 0 (concatD [prt 0 parameterdeclarations, doc (showString ","), prt 0 parameterdeclaration])

instance Print C.Abs.Parameter_declaration where
  prt i = \case
    C.Abs.OnlyType declarationspecifiers -> prPrec i 0 (concatD [prt 0 declarationspecifiers])
    C.Abs.TypeAndParam declarationspecifiers declarator -> prPrec i 0 (concatD [prt 0 declarationspecifiers, prt 0 declarator])
    C.Abs.Abstract declarationspecifiers abstractdeclarator -> prPrec i 0 (concatD [prt 0 declarationspecifiers, prt 0 abstractdeclarator])

instance Print [C.Abs.CIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print C.Abs.Initializer where
  prt i = \case
    C.Abs.InitExpr exp -> prPrec i 0 (concatD [prt 2 exp])
    C.Abs.InitListOne initializers -> prPrec i 0 (concatD [doc (showString "{"), prt 0 initializers, doc (showString "}")])
    C.Abs.InitListTwo initializers -> prPrec i 0 (concatD [doc (showString "{"), prt 0 initializers, doc (showString ","), doc (showString "}")])

instance Print C.Abs.Initializers where
  prt i = \case
    C.Abs.AnInit initializer -> prPrec i 0 (concatD [prt 0 initializer])
    C.Abs.MoreInit initializers initializer -> prPrec i 0 (concatD [prt 0 initializers, doc (showString ","), prt 0 initializer])

instance Print C.Abs.Type_name where
  prt i = \case
    C.Abs.PlainType specquals -> prPrec i 0 (concatD [prt 0 specquals])
    C.Abs.ExtendedType specquals abstractdeclarator -> prPrec i 0 (concatD [prt 0 specquals, prt 0 abstractdeclarator])

instance Print C.Abs.Abstract_declarator where
  prt i = \case
    C.Abs.PointerStart pointer -> prPrec i 0 (concatD [prt 0 pointer])
    C.Abs.Advanced dirabsdec -> prPrec i 0 (concatD [prt 0 dirabsdec])
    C.Abs.PointAdvanced pointer dirabsdec -> prPrec i 0 (concatD [prt 0 pointer, prt 0 dirabsdec])

instance Print C.Abs.Dir_abs_dec where
  prt i = \case
    C.Abs.WithinParentes abstractdeclarator -> prPrec i 0 (concatD [doc (showString "("), prt 0 abstractdeclarator, doc (showString ")")])
    C.Abs.Array -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]")])
    C.Abs.InitiatedArray constantexpression -> prPrec i 0 (concatD [doc (showString "["), prt 0 constantexpression, doc (showString "]")])
    C.Abs.UnInitiated dirabsdec -> prPrec i 0 (concatD [prt 0 dirabsdec, doc (showString "["), doc (showString "]")])
    C.Abs.Initiated dirabsdec constantexpression -> prPrec i 0 (concatD [prt 0 dirabsdec, doc (showString "["), prt 0 constantexpression, doc (showString "]")])
    C.Abs.OldFunction -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    C.Abs.NewFunction parametertype -> prPrec i 0 (concatD [doc (showString "("), prt 0 parametertype, doc (showString ")")])
    C.Abs.OldFuncExpr dirabsdec -> prPrec i 0 (concatD [prt 0 dirabsdec, doc (showString "("), doc (showString ")")])
    C.Abs.NewFuncExpr dirabsdec parametertype -> prPrec i 0 (concatD [prt 0 dirabsdec, doc (showString "("), prt 0 parametertype, doc (showString ")")])

instance Print C.Abs.Stm where
  prt i = \case
    C.Abs.LabelS labeledstm -> prPrec i 0 (concatD [prt 0 labeledstm])
    C.Abs.CompS compoundstm -> prPrec i 0 (concatD [prt 0 compoundstm])
    C.Abs.ExprS expressionstm -> prPrec i 0 (concatD [prt 0 expressionstm])
    C.Abs.SelS selectionstm -> prPrec i 0 (concatD [prt 0 selectionstm])
    C.Abs.IterS iterstm -> prPrec i 0 (concatD [prt 0 iterstm])
    C.Abs.JumpS jumpstm -> prPrec i 0 (concatD [prt 0 jumpstm])

instance Print C.Abs.Labeled_stm where
  prt i = \case
    C.Abs.SlabelOne cident stm -> prPrec i 0 (concatD [prt 0 cident, doc (showString ":"), prt 0 stm])
    C.Abs.SlabelTwo constantexpression stm -> prPrec i 0 (concatD [doc (showString "case"), prt 0 constantexpression, doc (showString ":"), prt 0 stm])
    C.Abs.SlabelThree stm -> prPrec i 0 (concatD [doc (showString "default"), doc (showString ":"), prt 0 stm])

instance Print C.Abs.Compound_stm where
  prt i = \case
    C.Abs.ScompOne -> prPrec i 0 (concatD [doc (showString "{"), doc (showString "}")])
    C.Abs.ScompFour decstmlist -> prPrec i 0 (concatD [doc (showString "{"), prt 0 decstmlist, doc (showString "}")])

instance Print C.Abs.DecStm where
  prt i = \case
    C.Abs.SstmOrDclOne dec -> prPrec i 0 (concatD [prt 0 dec])
    C.Abs.SstmOrDclTwo stm -> prPrec i 0 (concatD [prt 0 stm])

instance Print C.Abs.DecStmList where
  prt i = \case
    C.Abs.SDecStmListNone -> prPrec i 0 (concatD [])
    C.Abs.SDecStmListOne decstm decstmlist -> prPrec i 0 (concatD [prt 0 decstm, prt 0 decstmlist])

instance Print C.Abs.Expression_stm where
  prt i = \case
    C.Abs.SexprOne -> prPrec i 0 (concatD [doc (showString ";")])
    C.Abs.SexprTwo exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])

instance Print C.Abs.DeclExprList where
  prt i = \case
    C.Abs.SdexprListNone -> prPrec i 0 (concatD [])
    C.Abs.SdexprListOne declexpr declexprlist -> prPrec i 0 (concatD [prt 0 declexpr, doc (showString ";"), prt 0 declexprlist])

instance Print C.Abs.DeclExpr where
  prt i = \case
    C.Abs.SdExprOne exp -> prPrec i 0 (concatD [prt 0 exp])
    C.Abs.SdExprTwo dec -> prPrec i 0 (concatD [prt 0 dec])

instance Print C.Abs.Selection_stm where
  prt i = \case
    C.Abs.SselOne exp stm -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    C.Abs.SselTwo exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    C.Abs.SselThree exp stm -> prPrec i 0 (concatD [doc (showString "switch"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])

instance Print C.Abs.Iter_stm where
  prt i = \case
    C.Abs.SiterOne exp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    C.Abs.SiterTwo stm exp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString ";")])
    C.Abs.SiterThree declexpr expressionstm stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 declexpr, prt 0 expressionstm, doc (showString ")"), prt 0 stm])
    C.Abs.SiterFour declexpr expressionstm exp stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 declexpr, prt 0 expressionstm, prt 0 exp, doc (showString ")"), prt 0 stm])

instance Print C.Abs.Jump_stm where
  prt i = \case
    C.Abs.SjumpOne cident -> prPrec i 0 (concatD [doc (showString "goto"), prt 0 cident, doc (showString ";")])
    C.Abs.SjumpTwo -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    C.Abs.SjumpThree -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    C.Abs.SjumpFour -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    C.Abs.SjumpFive exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])

instance Print [C.Abs.Stm] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print C.Abs.Exp where
  prt i = \case
    C.Abs.Ecomma exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ","), prt 2 exp2])
    C.Abs.Eassign exp1 assignmentop exp2 -> prPrec i 2 (concatD [prt 15 exp1, prt 0 assignmentop, prt 2 exp2])
    C.Abs.Econdition exp1 exp2 exp3 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 3 exp3])
    C.Abs.Elor exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "||"), prt 5 exp2])
    C.Abs.Eland exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "&&"), prt 6 exp2])
    C.Abs.Ebitor exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "|"), prt 7 exp2])
    C.Abs.Ebitexor exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "^"), prt 8 exp2])
    C.Abs.Ebitand exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "&"), prt 9 exp2])
    C.Abs.Eeq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "=="), prt 10 exp2])
    C.Abs.Eneq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "!="), prt 10 exp2])
    C.Abs.Elthen exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<"), prt 11 exp2])
    C.Abs.Egrthen exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">"), prt 11 exp2])
    C.Abs.Ele exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<="), prt 11 exp2])
    C.Abs.Ege exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">="), prt 11 exp2])
    C.Abs.Eleft exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "<<"), prt 12 exp2])
    C.Abs.Eright exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString ">>"), prt 12 exp2])
    C.Abs.Eplus exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "+"), prt 13 exp2])
    C.Abs.Eminus exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "-"), prt 13 exp2])
    C.Abs.Etimes exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "*"), prt 14 exp2])
    C.Abs.Ediv exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "/"), prt 14 exp2])
    C.Abs.Emod exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "%"), prt 14 exp2])
    C.Abs.Etypeconv typename exp -> prPrec i 14 (concatD [doc (showString "("), prt 0 typename, doc (showString ")"), prt 14 exp])
    C.Abs.Epreinc exp -> prPrec i 15 (concatD [doc (showString "++"), prt 15 exp])
    C.Abs.Epredec exp -> prPrec i 15 (concatD [doc (showString "--"), prt 15 exp])
    C.Abs.Epreop unaryoperator exp -> prPrec i 15 (concatD [prt 0 unaryoperator, prt 14 exp])
    C.Abs.Ebytesexpr exp -> prPrec i 15 (concatD [doc (showString "sizeof"), prt 15 exp])
    C.Abs.Ebytestype typename -> prPrec i 15 (concatD [doc (showString "sizeof"), doc (showString "("), prt 0 typename, doc (showString ")")])
    C.Abs.Earray exp1 exp2 -> prPrec i 16 (concatD [prt 16 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    C.Abs.Efunk exp -> prPrec i 16 (concatD [prt 16 exp, doc (showString "("), doc (showString ")")])
    C.Abs.Efunkpar exp exps -> prPrec i 16 (concatD [prt 16 exp, doc (showString "("), prt 2 exps, doc (showString ")")])
    C.Abs.Eselect exp cident -> prPrec i 16 (concatD [prt 16 exp, doc (showString "."), prt 0 cident])
    C.Abs.Epoint exp cident -> prPrec i 16 (concatD [prt 16 exp, doc (showString "->"), prt 0 cident])
    C.Abs.Epostinc exp -> prPrec i 16 (concatD [prt 16 exp, doc (showString "++")])
    C.Abs.Epostdec exp -> prPrec i 16 (concatD [prt 16 exp, doc (showString "--")])
    C.Abs.Evar cident -> prPrec i 17 (concatD [prt 0 cident])
    C.Abs.Econst constant -> prPrec i 17 (concatD [prt 0 constant])
    C.Abs.Estring str -> prPrec i 17 (concatD [printString str])

instance Print C.Abs.Constant where
  prt i = \case
    C.Abs.Efloat d -> prPrec i 0 (concatD [prt 0 d])
    C.Abs.Echar c -> prPrec i 0 (concatD [prt 0 c])
    C.Abs.Eunsigned unsigned -> prPrec i 0 (concatD [prt 0 unsigned])
    C.Abs.Elong long -> prPrec i 0 (concatD [prt 0 long])
    C.Abs.Eunsignlong unsignedlong -> prPrec i 0 (concatD [prt 0 unsignedlong])
    C.Abs.Ehexadec hexadecimal -> prPrec i 0 (concatD [prt 0 hexadecimal])
    C.Abs.Ehexaunsign hexunsigned -> prPrec i 0 (concatD [prt 0 hexunsigned])
    C.Abs.Ehexalong hexlong -> prPrec i 0 (concatD [prt 0 hexlong])
    C.Abs.Ehexaunslong hexunslong -> prPrec i 0 (concatD [prt 0 hexunslong])
    C.Abs.Eoctal octal -> prPrec i 0 (concatD [prt 0 octal])
    C.Abs.Eoctalunsign octalunsigned -> prPrec i 0 (concatD [prt 0 octalunsigned])
    C.Abs.Eoctallong octallong -> prPrec i 0 (concatD [prt 0 octallong])
    C.Abs.Eoctalunslong octalunslong -> prPrec i 0 (concatD [prt 0 octalunslong])
    C.Abs.Ecdouble cdouble -> prPrec i 0 (concatD [prt 0 cdouble])
    C.Abs.Ecfloat cfloat -> prPrec i 0 (concatD [prt 0 cfloat])
    C.Abs.Eclongdouble clongdouble -> prPrec i 0 (concatD [prt 0 clongdouble])
    C.Abs.Eint n -> prPrec i 0 (concatD [prt 0 n])
    C.Abs.Elonger n -> prPrec i 0 (concatD [prt 0 n])
    C.Abs.Edouble d -> prPrec i 0 (concatD [prt 0 d])

instance Print C.Abs.Constant_expression where
  prt i = \case
    C.Abs.Especial exp -> prPrec i 0 (concatD [prt 3 exp])

instance Print C.Abs.Unary_operator where
  prt i = \case
    C.Abs.Address -> prPrec i 0 (concatD [doc (showString "&")])
    C.Abs.Indirection -> prPrec i 0 (concatD [doc (showString "*")])
    C.Abs.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    C.Abs.Negative -> prPrec i 0 (concatD [doc (showString "-")])
    C.Abs.Complement -> prPrec i 0 (concatD [doc (showString "~")])
    C.Abs.Logicalneg -> prPrec i 0 (concatD [doc (showString "!")])

instance Print [C.Abs.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 2 x]
  prt _ (x:xs) = concatD [prt 2 x, doc (showString ","), prt 2 xs]

instance Print C.Abs.Assignment_op where
  prt i = \case
    C.Abs.Assign -> prPrec i 0 (concatD [doc (showString "=")])
    C.Abs.AssignMul -> prPrec i 0 (concatD [doc (showString "*=")])
    C.Abs.AssignDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    C.Abs.AssignMod -> prPrec i 0 (concatD [doc (showString "%=")])
    C.Abs.AssignAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    C.Abs.AssignSub -> prPrec i 0 (concatD [doc (showString "-=")])
    C.Abs.AssignLeft -> prPrec i 0 (concatD [doc (showString "<<=")])
    C.Abs.AssignRight -> prPrec i 0 (concatD [doc (showString ">>=")])
    C.Abs.AssignAnd -> prPrec i 0 (concatD [doc (showString "&=")])
    C.Abs.AssignXor -> prPrec i 0 (concatD [doc (showString "^=")])
    C.Abs.AssignOr -> prPrec i 0 (concatD [doc (showString "|=")])
