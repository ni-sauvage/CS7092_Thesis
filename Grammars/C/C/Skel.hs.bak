-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module C.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified C.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transUnsigned :: C.Abs.Unsigned -> Result
transUnsigned x = case x of
  C.Abs.Unsigned string -> failure x

transLong :: C.Abs.Long -> Result
transLong x = case x of
  C.Abs.Long string -> failure x

transUnsignedLong :: C.Abs.UnsignedLong -> Result
transUnsignedLong x = case x of
  C.Abs.UnsignedLong string -> failure x

transHexadecimal :: C.Abs.Hexadecimal -> Result
transHexadecimal x = case x of
  C.Abs.Hexadecimal string -> failure x

transHexUnsigned :: C.Abs.HexUnsigned -> Result
transHexUnsigned x = case x of
  C.Abs.HexUnsigned string -> failure x

transHexLong :: C.Abs.HexLong -> Result
transHexLong x = case x of
  C.Abs.HexLong string -> failure x

transHexUnsLong :: C.Abs.HexUnsLong -> Result
transHexUnsLong x = case x of
  C.Abs.HexUnsLong string -> failure x

transOctal :: C.Abs.Octal -> Result
transOctal x = case x of
  C.Abs.Octal string -> failure x

transOctalUnsigned :: C.Abs.OctalUnsigned -> Result
transOctalUnsigned x = case x of
  C.Abs.OctalUnsigned string -> failure x

transOctalLong :: C.Abs.OctalLong -> Result
transOctalLong x = case x of
  C.Abs.OctalLong string -> failure x

transOctalUnsLong :: C.Abs.OctalUnsLong -> Result
transOctalUnsLong x = case x of
  C.Abs.OctalUnsLong string -> failure x

transCDouble :: C.Abs.CDouble -> Result
transCDouble x = case x of
  C.Abs.CDouble string -> failure x

transCFloat :: C.Abs.CFloat -> Result
transCFloat x = case x of
  C.Abs.CFloat string -> failure x

transCLongDouble :: C.Abs.CLongDouble -> Result
transCLongDouble x = case x of
  C.Abs.CLongDouble string -> failure x

transCIdent :: C.Abs.CIdent -> Result
transCIdent x = case x of
  C.Abs.CIdent string -> failure x

transProgram :: C.Abs.Program -> Result
transProgram x = case x of
  C.Abs.Progr externaldeclarations -> failure x

transExternal_declaration :: C.Abs.External_declaration -> Result
transExternal_declaration x = case x of
  C.Abs.Afunc functiondef -> failure x
  C.Abs.Global dec -> failure x

transFunction_def :: C.Abs.Function_def -> Result
transFunction_def x = case x of
  C.Abs.OldFunc declarationspecifiers declarator decs compoundstm -> failure x
  C.Abs.NewFunc declarationspecifiers declarator compoundstm -> failure x
  C.Abs.OldFuncInt declarator decs compoundstm -> failure x
  C.Abs.NewFuncInt declarator compoundstm -> failure x

transDec :: C.Abs.Dec -> Result
transDec x = case x of
  C.Abs.NoDeclarator declarationspecifiers -> failure x
  C.Abs.Declarators declarationspecifiers initdeclarators -> failure x

transDeclaration_specifier :: C.Abs.Declaration_specifier -> Result
transDeclaration_specifier x = case x of
  C.Abs.Type typespecifier -> failure x
  C.Abs.Storage storageclassspecifier -> failure x
  C.Abs.SpecProp typequalifier -> failure x

transInit_declarator :: C.Abs.Init_declarator -> Result
transInit_declarator x = case x of
  C.Abs.OnlyDecl declarator -> failure x
  C.Abs.InitDecl declarator initializer -> failure x

transType_specifier :: C.Abs.Type_specifier -> Result
transType_specifier x = case x of
  C.Abs.Tvoid -> failure x
  C.Abs.Tchar -> failure x
  C.Abs.Tshort -> failure x
  C.Abs.Tint -> failure x
  C.Abs.Tlong -> failure x
  C.Abs.Tfloat -> failure x
  C.Abs.Tdouble -> failure x
  C.Abs.Tsigned -> failure x
  C.Abs.Tunsigned -> failure x
  C.Abs.Tstruct structorunionspec -> failure x
  C.Abs.Tenum enumspecifier -> failure x
  C.Abs.Tname -> failure x
  C.Abs.Trtsc -> failure x
  C.Abs.Trtes -> failure x
  C.Abs.Trtid -> failure x
  C.Abs.Trtctx -> failure x
  C.Abs.Trttp -> failure x
  C.Abs.Tszet -> failure x
  C.Abs.Tevctx -> failure x

transStorage_class_specifier :: C.Abs.Storage_class_specifier -> Result
transStorage_class_specifier x = case x of
  C.Abs.MyType -> failure x
  C.Abs.GlobalPrograms -> failure x
  C.Abs.LocalProgram -> failure x
  C.Abs.LocalBlock -> failure x
  C.Abs.LocalReg -> failure x

transType_qualifier :: C.Abs.Type_qualifier -> Result
transType_qualifier x = case x of
  C.Abs.Const -> failure x
  C.Abs.NoOptim -> failure x

transStruct_or_union_spec :: C.Abs.Struct_or_union_spec -> Result
transStruct_or_union_spec x = case x of
  C.Abs.Tag structorunion cident structdecs -> failure x
  C.Abs.Unique structorunion structdecs -> failure x
  C.Abs.TagType structorunion cident -> failure x

transStruct_or_union :: C.Abs.Struct_or_union -> Result
transStruct_or_union x = case x of
  C.Abs.Struct -> failure x
  C.Abs.Union -> failure x

transStruct_dec :: C.Abs.Struct_dec -> Result
transStruct_dec x = case x of
  C.Abs.Structen specquals structdeclarators -> failure x

transSpec_qual :: C.Abs.Spec_qual -> Result
transSpec_qual x = case x of
  C.Abs.TypeSpec typespecifier -> failure x
  C.Abs.QualSpec typequalifier -> failure x

transStruct_declarator :: C.Abs.Struct_declarator -> Result
transStruct_declarator x = case x of
  C.Abs.Decl declarator -> failure x
  C.Abs.Field constantexpression -> failure x
  C.Abs.DecField declarator constantexpression -> failure x

transEnum_specifier :: C.Abs.Enum_specifier -> Result
transEnum_specifier x = case x of
  C.Abs.EnumDec enumerators -> failure x
  C.Abs.EnumName cident enumerators -> failure x
  C.Abs.EnumVar cident -> failure x

transEnumerator :: C.Abs.Enumerator -> Result
transEnumerator x = case x of
  C.Abs.Plain cident -> failure x
  C.Abs.EnumInit cident constantexpression -> failure x

transDeclarator :: C.Abs.Declarator -> Result
transDeclarator x = case x of
  C.Abs.BeginPointer pointer directdeclarator -> failure x
  C.Abs.NoPointer directdeclarator -> failure x

transDirect_declarator :: C.Abs.Direct_declarator -> Result
transDirect_declarator x = case x of
  C.Abs.Name cident -> failure x
  C.Abs.ParenDecl declarator -> failure x
  C.Abs.InnitArray directdeclarator constantexpression -> failure x
  C.Abs.Incomplete directdeclarator -> failure x
  C.Abs.NewFuncDec directdeclarator parametertype -> failure x
  C.Abs.OldFuncDef directdeclarator cidents -> failure x
  C.Abs.OldFuncDec directdeclarator -> failure x

transPointer :: C.Abs.Pointer -> Result
transPointer x = case x of
  C.Abs.Point -> failure x
  C.Abs.PointQual typequalifiers -> failure x
  C.Abs.PointPoint pointer -> failure x
  C.Abs.PointQualPoint typequalifiers pointer -> failure x

transParameter_type :: C.Abs.Parameter_type -> Result
transParameter_type x = case x of
  C.Abs.AllSpec parameterdeclarations -> failure x
  C.Abs.More parameterdeclarations -> failure x

transParameter_declarations :: C.Abs.Parameter_declarations -> Result
transParameter_declarations x = case x of
  C.Abs.ParamDec parameterdeclaration -> failure x
  C.Abs.MoreParamDec parameterdeclarations parameterdeclaration -> failure x

transParameter_declaration :: C.Abs.Parameter_declaration -> Result
transParameter_declaration x = case x of
  C.Abs.OnlyType declarationspecifiers -> failure x
  C.Abs.TypeAndParam declarationspecifiers declarator -> failure x
  C.Abs.Abstract declarationspecifiers abstractdeclarator -> failure x

transInitializer :: C.Abs.Initializer -> Result
transInitializer x = case x of
  C.Abs.InitExpr exp -> failure x
  C.Abs.InitListOne initializers -> failure x
  C.Abs.InitListTwo initializers -> failure x

transInitializers :: C.Abs.Initializers -> Result
transInitializers x = case x of
  C.Abs.AnInit initializer -> failure x
  C.Abs.MoreInit initializers initializer -> failure x

transType_name :: C.Abs.Type_name -> Result
transType_name x = case x of
  C.Abs.PlainType specquals -> failure x
  C.Abs.ExtendedType specquals abstractdeclarator -> failure x

transAbstract_declarator :: C.Abs.Abstract_declarator -> Result
transAbstract_declarator x = case x of
  C.Abs.PointerStart pointer -> failure x
  C.Abs.Advanced dirabsdec -> failure x
  C.Abs.PointAdvanced pointer dirabsdec -> failure x

transDir_abs_dec :: C.Abs.Dir_abs_dec -> Result
transDir_abs_dec x = case x of
  C.Abs.WithinParentes abstractdeclarator -> failure x
  C.Abs.Array -> failure x
  C.Abs.InitiatedArray constantexpression -> failure x
  C.Abs.UnInitiated dirabsdec -> failure x
  C.Abs.Initiated dirabsdec constantexpression -> failure x
  C.Abs.OldFunction -> failure x
  C.Abs.NewFunction parametertype -> failure x
  C.Abs.OldFuncExpr dirabsdec -> failure x
  C.Abs.NewFuncExpr dirabsdec parametertype -> failure x

transStm :: C.Abs.Stm -> Result
transStm x = case x of
  C.Abs.LabelS labeledstm -> failure x
  C.Abs.CompS compoundstm -> failure x
  C.Abs.ExprS expressionstm -> failure x
  C.Abs.SelS selectionstm -> failure x
  C.Abs.IterS iterstm -> failure x
  C.Abs.JumpS jumpstm -> failure x

transLabeled_stm :: C.Abs.Labeled_stm -> Result
transLabeled_stm x = case x of
  C.Abs.SlabelOne cident stm -> failure x
  C.Abs.SlabelTwo constantexpression stm -> failure x
  C.Abs.SlabelThree stm -> failure x

transCompound_stm :: C.Abs.Compound_stm -> Result
transCompound_stm x = case x of
  C.Abs.ScompOne -> failure x
  C.Abs.ScompTwo stms -> failure x
  C.Abs.ScompThree decs -> failure x
  C.Abs.ScompFour decs stms -> failure x

transExpression_stm :: C.Abs.Expression_stm -> Result
transExpression_stm x = case x of
  C.Abs.SexprOne -> failure x
  C.Abs.SexprTwo exp -> failure x

transSelection_stm :: C.Abs.Selection_stm -> Result
transSelection_stm x = case x of
  C.Abs.SselOne exp stm -> failure x
  C.Abs.SselTwo exp stm1 stm2 -> failure x
  C.Abs.SselThree exp stm -> failure x

transIter_stm :: C.Abs.Iter_stm -> Result
transIter_stm x = case x of
  C.Abs.SiterOne exp stm -> failure x
  C.Abs.SiterTwo stm exp -> failure x
  C.Abs.SiterThree expressionstm1 expressionstm2 stm -> failure x
  C.Abs.SiterFour expressionstm1 expressionstm2 exp stm -> failure x

transJump_stm :: C.Abs.Jump_stm -> Result
transJump_stm x = case x of
  C.Abs.SjumpOne cident -> failure x
  C.Abs.SjumpTwo -> failure x
  C.Abs.SjumpThree -> failure x
  C.Abs.SjumpFour -> failure x
  C.Abs.SjumpFive exp -> failure x

transExp :: C.Abs.Exp -> Result
transExp x = case x of
  C.Abs.Ecomma exp1 exp2 -> failure x
  C.Abs.Eassign exp1 assignmentop exp2 -> failure x
  C.Abs.Econdition exp1 exp2 exp3 -> failure x
  C.Abs.Elor exp1 exp2 -> failure x
  C.Abs.Eland exp1 exp2 -> failure x
  C.Abs.Ebitor exp1 exp2 -> failure x
  C.Abs.Ebitexor exp1 exp2 -> failure x
  C.Abs.Ebitand exp1 exp2 -> failure x
  C.Abs.Eeq exp1 exp2 -> failure x
  C.Abs.Eneq exp1 exp2 -> failure x
  C.Abs.Elthen exp1 exp2 -> failure x
  C.Abs.Egrthen exp1 exp2 -> failure x
  C.Abs.Ele exp1 exp2 -> failure x
  C.Abs.Ege exp1 exp2 -> failure x
  C.Abs.Eleft exp1 exp2 -> failure x
  C.Abs.Eright exp1 exp2 -> failure x
  C.Abs.Eplus exp1 exp2 -> failure x
  C.Abs.Eminus exp1 exp2 -> failure x
  C.Abs.Etimes exp1 exp2 -> failure x
  C.Abs.Ediv exp1 exp2 -> failure x
  C.Abs.Emod exp1 exp2 -> failure x
  C.Abs.Etypeconv typename exp -> failure x
  C.Abs.Epreinc exp -> failure x
  C.Abs.Epredec exp -> failure x
  C.Abs.Epreop unaryoperator exp -> failure x
  C.Abs.Ebytesexpr exp -> failure x
  C.Abs.Ebytestype typename -> failure x
  C.Abs.Earray exp1 exp2 -> failure x
  C.Abs.Efunk exp -> failure x
  C.Abs.Efunkpar exp exps -> failure x
  C.Abs.Eselect exp cident -> failure x
  C.Abs.Epoint exp cident -> failure x
  C.Abs.Epostinc exp -> failure x
  C.Abs.Epostdec exp -> failure x
  C.Abs.Evar cident -> failure x
  C.Abs.Econst constant -> failure x
  C.Abs.Estring string -> failure x

transConstant :: C.Abs.Constant -> Result
transConstant x = case x of
  C.Abs.Efloat double -> failure x
  C.Abs.Echar char -> failure x
  C.Abs.Eunsigned unsigned -> failure x
  C.Abs.Elong long -> failure x
  C.Abs.Eunsignlong unsignedlong -> failure x
  C.Abs.Ehexadec hexadecimal -> failure x
  C.Abs.Ehexaunsign hexunsigned -> failure x
  C.Abs.Ehexalong hexlong -> failure x
  C.Abs.Ehexaunslong hexunslong -> failure x
  C.Abs.Eoctal octal -> failure x
  C.Abs.Eoctalunsign octalunsigned -> failure x
  C.Abs.Eoctallong octallong -> failure x
  C.Abs.Eoctalunslong octalunslong -> failure x
  C.Abs.Ecdouble cdouble -> failure x
  C.Abs.Ecfloat cfloat -> failure x
  C.Abs.Eclongdouble clongdouble -> failure x
  C.Abs.Eint integer -> failure x
  C.Abs.Elonger integer -> failure x
  C.Abs.Edouble double -> failure x

transConstant_expression :: C.Abs.Constant_expression -> Result
transConstant_expression x = case x of
  C.Abs.Especial exp -> failure x

transUnary_operator :: C.Abs.Unary_operator -> Result
transUnary_operator x = case x of
  C.Abs.Address -> failure x
  C.Abs.Indirection -> failure x
  C.Abs.Plus -> failure x
  C.Abs.Negative -> failure x
  C.Abs.Complement -> failure x
  C.Abs.Logicalneg -> failure x

transAssignment_op :: C.Abs.Assignment_op -> Result
transAssignment_op x = case x of
  C.Abs.Assign -> failure x
  C.Abs.AssignMul -> failure x
  C.Abs.AssignDiv -> failure x
  C.Abs.AssignMod -> failure x
  C.Abs.AssignAdd -> failure x
  C.Abs.AssignSub -> failure x
  C.Abs.AssignLeft -> failure x
  C.Abs.AssignRight -> failure x
  C.Abs.AssignAnd -> failure x
  C.Abs.AssignXor -> failure x
  C.Abs.AssignOr -> failure x
